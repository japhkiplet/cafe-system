{
  "version": 3,
  "sources": ["../../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts", "../../node_modules/@hookform/resolvers/src/toNestError.ts", "../../node_modules/@hookform/resolvers/yup/src/yup.ts"],
  "sourcesContent": ["import {\n  get,\n  FieldError,\n  ResolverOptions,\n  Ref,\n  FieldErrors,\n  FieldValues,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n", "import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n  FieldValues,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path] || {}, { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n", "import * as Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.raw ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"],
  "mappings": "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",
  "names": ["setCustomValidity", "ref", "fieldPath", "errors", "error", "get", "message", "reportValidity", "validateFieldsNatively", "options", "_loop", "field", "fields", "refs", "forEach", "toNestError", "shouldUseNativeValidation", "fieldErrors", "path", "set", "Object", "assign", "yupResolver", "schema", "schemaOptions", "resolverOptions", "values", "context", "options", "Promise", "resolve", "console", "warn", "mode", "Object", "assign", "abortEarly", "then", "result", "shouldUseNativeValidation", "validateFieldsNatively", "raw", "errors", "e", "inner", "toNestError", "error", "validateAllFieldCriteria", "criteriaMode", "reduce", "previous", "path", "message", "type", "types", "messages", "appendErrors", "concat", "reject"]
}
